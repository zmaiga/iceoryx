
# This is a basic workflow to help you get started with the Run C/C++test action for a CMake-based project.
name: Unit Testing with Code Coverage (Compliance)

on:
  # Triggers the workflow pull request events but only for the master (main) branch.
  pull_request:
    branches: [ master, main, feature_branch_1 ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

env:
  LINE_COV_GATE: 90
  MCDC_COV_GATE: 70
  DTP_PROJECT: iceoryx

permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write
  # only required for workflows in private repositories
  actions: read
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  run-cpptestct-cmake:
    name: Analyze project with C/C++test CT

    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

      # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set build id
        shell: bash
        working-directory: ${{github.workspace}}
        run: echo "build_id=build-$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV 
      
      - name: Configure Project
        run: |
          # git config --global --add safe.directory /workspaces/iceoryx
          cmake -Bbuild -Hiceoryx_meta -DCPPTEST_COVERAGE=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCPPTEST_HOME=/opt/Parasoft/cpptest-ct -DBUILD_TEST=ON -DCMAKE_PREFIX_PATH=$(pwd)/build/dependencies/

      # Builds your CMake project. (This step is optional, as it is not required for code analysis).
      - name: Build Project
        run: |
          cmake --build build -j8

      - name: Run Unit Tests
        run: |
          rm -rf build/cpptest-coverage/iceoryx_meta/iceoryx_meta.clog
          rm -rf build/gtest_results.xml
          ./build/hoofs/test/hoofs_moduletests --gtest_filter="*vector_test*" --gtest_output=xml:build/gtest_results.xml

      # Builds your CMake project. (This step is optional, as it is not required for code analysis).
      - name: Compute Coverage
        working-directory: ${{github.workspace}}/build
        run: |
          cpptestcov compute -map cpptest-coverage/iceoryx_meta/.cpptest -clog cpptest-coverage/iceoryx_meta/iceoryx_meta.clog -out .coverage

      - name: Report Coverage to Console
        working-directory: ${{github.workspace}}/build
        run: |
          cpptestcov report text .coverage

      - name: Compute Index for VS Code
        working-directory: ${{github.workspace}}/build
        run: |
          cpptestcov index .coverage

      - name: Generate Coverage Reports
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run:  cpptestcov report html .coverage -code -out .coverage/coverage.html

      - name: Publish Reports to DTP
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run:  cpptestcov report dtp -property build.id=${build_id} -property dtp.project=${DTP_PROJECT} .coverage gtest_results.xml
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload coverage reports
          path: ${{github.workspace}}/build/.coverage
        
      - name: Archive reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: CpptestCTReports
          include-hidden-files: true
          path: |
            build/.coverage/*.*

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Show Coverage HTML Link
        shell: bash
        run: echo "Check html report https://zmaiga.github.io/iceoryx/coverage.html"
        
      - name: Line Coverage Quality Gate
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Query for project's coverage and compare with the gate requirements
        run: |
          NUMBER=$(cpptestcov query -coverage LC .coverage) && if [ $NUMBER -lt $LINE_COV_GATE ]; then echo "LINE coverage quality gate failed"; echo "Expected result $LINE_COV_GATE%, echieved $NUMBER%"; false; else echo "LINE coverage quality gate passed with $NUMBER% (required $LINE_COV_GATE%)"; true; fi  
          echo "Check html report https://zmaiga.github.io/iceoryx/coverage.html"
        
      - name: MCDC Coverage Quality Gate
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Query for project's coverage and compare with the gate requirements
        run: |
          NUMBER=$(cpptestcov query -coverage MCDC .coverage) && if [ $NUMBER -lt $MCDC_COV_GATE ]; then echo "MCDC coverage quality gate failed"; echo "Expected result $MCDC_COV_GATE%, echieved $NUMBER%"; false; else echo "MCDC coverage quality gate passed with $NUMBER% (required $MCDC_COV_GATE%)"; true; fi  
          echo "Check html report https://zmaiga.github.io/iceoryx/coverage.html"

      
        
